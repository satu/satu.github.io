// Generated by Haxe 4.2.1
(function ($global) { "use strict";
function Main_main() {
	window.document.addEventListener("DOMContentLoaded",new NutellaRainEventListener());
}
var NutellaRainEventListener = function() {
	this.nutellaSpeed = 2;
	this.nutellaCount = 33;
	this.nutellas = [];
};
NutellaRainEventListener.initializeNutella = function(nutellaSprite) {
	var tmp = Math.floor(Math.random() * window.innerHeight);
	nutellaSprite.style.top = tmp + "px";
	var tmp = Math.floor(Math.random() * window.innerWidth);
	nutellaSprite.style.left = tmp + "px";
};
NutellaRainEventListener.prototype = {
	handleEvent: function(event) {
		var _g = 0;
		var _g1 = this.nutellaCount;
		while(_g < _g1) {
			var i = _g++;
			var nutellaSprite = window.document.createElement("img");
			nutellaSprite.src = "images/nutella.gif";
			var style = nutellaSprite.style;
			style.width = "32px";
			style.position = "fixed";
			style.zIndex = "33";
			NutellaRainEventListener.initializeNutella(nutellaSprite);
			this.nutellas.push(nutellaSprite);
			window.document.body.appendChild(nutellaSprite);
		}
		var timer = new haxe_Timer(16);
		timer.run = $bind(this,this.animate);
	}
	,animate: function() {
		var _g = 0;
		var _g1 = this.nutellas;
		while(_g < _g1.length) {
			var nutellaSprite = _g1[_g];
			++_g;
			var yCoord = Std.parseInt(nutellaSprite.style.top);
			if(yCoord >= window.innerHeight) {
				NutellaRainEventListener.initializeNutella(nutellaSprite);
			} else {
				nutellaSprite.style.top = yCoord + this.nutellaSpeed + "px";
			}
		}
	}
};
var Std = function() { };
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.prototype = {
	run: function() {
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
Main_main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
